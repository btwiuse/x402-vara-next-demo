import {
  Account,
  Aptos,
  AptosConfig,
  Ed25519PrivateKey,
  Network,
} from "@aptos-labs/ts-sdk";
import { PaymentRequiredResponse } from '../src/types/protocol';

// Demo private key (generated by scripts/generate-account.ts)
const DEMO_PRIVATE_KEY = process.env.NEXT_PUBLIC_DEMO_PRIVATE_KEY ||
  "0x21c31d63f7719d3de90b9c14b264229db65609f11f86413cb81a7ed7fcb18f3f";

export async function aptosPaymentHeader(paymentDetails: PaymentRequiredResponse) {
  // Initialize Aptos client
  const config = new AptosConfig({ network: Network.TESTNET });
  const aptos = new Aptos(config);

  // Create account from hardcoded private key
  const privateKey = new Ed25519PrivateKey(DEMO_PRIVATE_KEY);
  const account = Account.fromPrivateKey({ privateKey });

  // Parse the 402 response which should contain accepts array per x402 spec
  const paymentReqs = paymentDetails.accepts?.[0] || paymentDetails;

  // Build transaction
  const transaction = await aptos.transaction.build.simple({
    sender: account.accountAddress,
    data: {
      function: "0x1::aptos_account::transfer",
      functionArguments: [
        paymentReqs.payTo,
        paymentReqs.maxAmountRequired,
      ],
    },
  });

  // Sign transaction - this returns an AccountAuthenticator
  const senderAuthenticator = aptos.transaction.sign({
    signer: account,
    transaction,
  });

  // Serialize transaction and signature separately (like Sui does)
  const transactionBytes = transaction.bcsToBytes();
  const transactionBase64 = Buffer.from(transactionBytes).toString("base64");

  const signatureBytes = senderAuthenticator.bcsToBytes();
  const signatureBase64 = Buffer.from(signatureBytes).toString("base64");

  console.log("Transaction and signature:", {
    transactionLength: transactionBytes.length,
    signatureLength: signatureBytes.length,
    transactionBase64Length: transactionBase64.length,
    signatureBase64Length: signatureBase64.length,
  });

  // For Aptos x402, we send transaction and signature separately (like Sui)
  const signedTxPayload = {
    signature: signatureBase64,
    transaction: transactionBase64,
  };

  // Create x402 PaymentPayload per official spec
  const paymentPayload = {
    x402Version: 1,
    scheme: "exact",
    network: paymentReqs.network || "aptos-testnet",
    payload: signedTxPayload,
  };

  // Base64 encode the PaymentPayload JSON for X-PAYMENT header
  const paymentHeader = Buffer.from(JSON.stringify(paymentPayload)).toString(
    "base64",
  );

  console.log("x402 Payment Payload:", {
    x402Version: paymentPayload.x402Version,
    scheme: paymentPayload.scheme,
    network: paymentPayload.network,
    hasSignature: !!signedTxPayload.signature,
    hasTransaction: !!signedTxPayload.transaction,
    signatureLength: signedTxPayload.signature?.length,
    txLength: signedTxPayload.transaction?.length,
    headerLength: paymentHeader.length,
  });

  return paymentHeader;
}
