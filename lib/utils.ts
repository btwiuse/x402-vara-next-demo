import { PaymentRequiredResponse } from 'x402-vara/lib';
import { Keyring } from "@polkadot/keyring";
import { hexToU8a } from '@polkadot/util';
import { cryptoWaitReady } from '@polkadot/util-crypto';
import { paymentHeader } from 'x402-vara/utils';
import type { WalletKeypair } from 'x402-vara';

// Demo private key (generated by scripts/generate-account.ts)
const DEMO_PRIVATE_KEY = process.env.NEXT_PUBLIC_DEMO_PRIVATE_KEY ||
  "0xe5be9a5092b81bca64be81d212e7f2f9eba183bb7a90954f7b76361f6edb5c0a";

export async function DemoAccount(): Promise<WalletKeypair> {
  await cryptoWaitReady();
  // create account from hardcoded private key
  const keyring = new Keyring({ type: "sr25519", ss58Format: 137 });
  const account = keyring.addFromSeed(hexToU8a(DEMO_PRIVATE_KEY));
  return account
}

export async function varaPaymentHeader(paymentDetails: PaymentRequiredResponse, account: WalletKeypair, selectedIndex: number = 0) {
  const { signWithAuto } = await import('x402-vara/browser');
  // Parse the 402 response which should contain accepts array per x402 spec
  const paymentReqs = paymentDetails.accepts?.[selectedIndex] || paymentDetails;
  return await paymentHeader(paymentReqs, account, signWithAuto);
}
